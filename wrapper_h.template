/* NOTE
   put this file into dir: ...\BCM_APP_L7_F142M\BCML7_CLIENT\CONFIGURATION_FILES\
*/
/******************************************************************************/
/**
 * \brief       <%= descriptor["Module"] %>.
 * \details     <%= descriptor["Details"] %>  
 *
 * \file        <%= descriptor["Module"] %>.h
 * \project{
 *              <%= descriptor["Platform"] %>
 *}
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 * \history{     
                <% for history in descriptor["History"] %>
 *              <%= history["Author"] %>,
 *              <%= history["Date"] %>,
 *              <%= history["Description"] %>,
                <% end %>
 *}
 */
/******************************************************************************/

#ifndef <%= descriptor["Module"] %>_H
#define <%= descriptor["Module"] %>_H

/*______ I N C L U D E - F I L E S ___________________________________________*/
<% if !external_link %>
#include "syst.h"
#include "doup.h"
#include "<%= descriptor["Module"] %>_config.h"
<% end %>

/*______ G L O B A L - D E F I N E S _________________________________________*/
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>

/* value used for signal from <%= signal["Source"] %> */
<% for value in input["Value"] %>
<% if !signal["Implemented"]  || descriptor["MIL"] %>
/* TODO when <%= signal["Source"] %> implemented comment next line */
#define <%= (signal["Source"]).upcase %>_<%= (input["Name"]).upcase %>_<%= (value[0]).upcase %> <%= value[1] %> /* for signal: <%= input["Name"] %> */
/* TODO when <%= signal["Source"] %> implemented delete comment next line and eventually associate right symbol present in <%= signal["Source"] %>.h*/
//#define <%= (signal["Source"]).upcase %>_<%= (input["Name"]).upcase %>_<%= (value[0]).upcase %> <%= value[2] %> /* for signal: <%= input["Name"] %> */
<% else %>
<% if  value[2] != '' %>
/* NOTE if you want you can also use the "given rule" and using value <%= (signal["Source"]).upcase %>_<%= (input["Name"]).upcase %>_<%= (value[0]).upcase %> for signal <%= input["Name"] %>
 * as synonymous for value: <%= signal["Source"] %>_<%= value[2] %>
 * comment next line if into model you only use value:  <%= signal["Source"] %>_<%= value[2] %>
*/
#define <%= (signal["Source"]).upcase %>_<%= (input["Name"]).upcase %>_<%= (value[0]).upcase %> <%= signal["Source"] %>_<%= value[2] %>
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>


<% for output in descriptor["Output"] %>
<% for value in output["Value"] %>
#define <%= (descriptor["Module"]).upcase %>_<%= (output["Name"]).upcase %>_<%= (value[0]).upcase %> <%= value[1] %> /* for signal: <%= output["Name"] %> */
<% end %>
<% end %>

<% if descriptor.has_key?("Timer") %>
#define VERS_TIMER_STOPPED 0
#define VERS_TIMER_RUNNING 1
#define VERS_TIMER_EXPIRED 2
<% end %>

<% if external_link %>
enum DOUP_ErrorType_e
{
  DOUP_NO_TYPE_ERR        = 0x00,
  DOUP_CA_ERR             = 0x01,
  DOUP_CC_GND_ERR         = 0x02,
  DOUP_CC_VB_ERR          = 0x03,
  DOUP_CA_CC_GND_ERR      = 0x04,
  DOUP_CA_CC_VB_ERR       = 0x05,
  DOUP_MAX_RANGE_ERR      = 0x06,
  DOUP_MIN_RANGE_ERR      = 0x07,
  DOUP_MAX_DELTA_ERR      = 0x08,
  DOUP_CA_CC_GEN_ERR      = 0x09,
  DOUP_NOT_VALIDATED_ERR  = 0x0a,
  DOUP_RETRY_CMD_FAIL     = 0x40,   /* usato per strategia di stacco del carico */
  DOUP_DESTRUCTIVE_FAIL   = 0x80,   /* usato per strategia di stacco del carico */
  DOUP_RESTART_DIAG       = 0xff,
} DOUP_ErrorType_t;

/* Stati di errore */
enum DOUP_ErrorStatus_e
{
  DOUP_NO_STATUS_ERR  = 0x00,    /* Errore assente */
  DOUP_VALID_ERR      = 0x07     /* Errore presente */
} DOUP_ErrorStatus_t;
<% end %>



/*______ G L O B A L - T Y P E S _____________________________________________*/

<% if descriptor["MIL"] %>
/* basic types definition */
typedef unsigned char       u_int08;  /* unsigned byte       (1 byte ) */
typedef unsigned short int  u_int16;  /* short unsigned word (2 bytes) */
typedef unsigned long  int  u_int32;  /* long unsigned word  (4 bytes) */
typedef signed   char       s_int08;  /* signed byte         (1 byte ) */
typedef signed   short int  s_int16;  /* short signed word   (2 bytes) */
typedef signed   long  int  s_int32;  /* long signed word    (4 bytes) */
typedef unsigned            bitfield; /* bitfield            (1 bit)   */
typedef float               float_t;
/* boolean type definition */
#ifndef FALSE
#define FALSE 0
#endif
#ifndef TRUE
#define TRUE  1
#endif
typedef u_int08 bool_t;
<% end %>

<% for output in descriptor["Output"] %>
typedef <%= output["Type"] %> <%= descriptor["Module"] %>_<%= output["Name"] %>_t ;
<% end %>



/*______ G L O B A L - D A T A _______________________________________________*/

/*______ G L O B A L - M A C R O S ___________________________________________*/
<% for output in descriptor["Output"] %>
<% for signal in output["Signal"]%>
<% if signal["Type"] == "NBC"%>
<% if signal.has_key?("VFTarget") %>
#define <%= descriptor["Module"].upcase %>_<%= output["Name"].upcase %>_STATUS_CHANGED()\
{\
<% for target in signal["VFTarget"]%>
/* delete comment in following line when <%= target["Name"] %> is implemented and integrated */
//<%= target["Name"] %>_<%= output["Name"]%>StatusChanged();\
<% end %>
}
<% end %>
<% end %>
<% end %>
<% end %>

/*______ G L O B A L - F U N C T I O N S - P R O T O T Y P E S _______________*/
<% proxi_used=0 %>
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "PROXI" %>
<% proxi_used=1 %>
<% end %>
<% end %>
<% end %>
<% if proxi_used == 1 %>
extern void <%= descriptor["Module"] %>_ProxiStatusChanged(void);
<% end %>

<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "NBC" %>
extern void <%= descriptor["Module"] %>_<%= input["Name"] %>StatusChanged(void);
<% end %>
<% end %>
<% end %>

<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "PHY" %>
extern void <%= descriptor["Module"] %>_<%= input["Name"] %>StatusChanged(void);
<% end %>
<% end %>
<% end %>

<% for output in descriptor["Output"] %>
<% for signal in output["Signal"]%>
<% if signal.has_key?("Diagnosis") %>
<% if signal["Type"] == "PHY" && signal["Diagnosis"]%>
extern void <%= descriptor["Module"] %>_<%= output["Name"] %>Diagnosis(void);
<% end %>
<% end %>
<% end %>
<% end %>


<% mset = Hash.new %>
<% mset.default=0 %>
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "CAN" %>
<% if  mset[signal["MessageName"]] == 0 %>
<% mset[signal["MessageName"]]=[] %>
<% end %>
<% mset[signal["MessageName"]] << signal %>
<% end %>
<% end %>
<% end %>
<% mset.each_key do | messagename | %>
extern void <%= descriptor["Module"] %>_<%= messagename %>_Confirmation(void);
<% end %>


<% for output in descriptor["Output"] %>
extern <%= descriptor["Module"] %>_<%= output["Name"] %>_t <%= descriptor["Module"] %>_Get<%= output["Name"] %>(void);
<% end %>

<% if descriptor.has_key?("Timer") %>
<% for timer in descriptor["Timer"] %>
<% if timer["Implemented"] %>
extern void <%= descriptor["Module"] %>_SetTimer<%= timer["Name"] %>(u_int32);
extern void <%= descriptor["Module"] %>_ResetTimer<%= timer["Name"] %>(void);
<% end %>
<% end %>
<% end %>

extern void <%= descriptor["Module"] %>_Init(void);
extern void <%= descriptor["Module"] %>_WakeUp(void);
extern void <%= descriptor["Module"] %>_Sleep(void);
extern void <%= descriptor["Module"] %>_Task_ts(void);
extern void <%= descriptor["Module"] %>_StayActive(void);
extern void <%= descriptor["Module"] %>_GoToSleep(void);


#endif /* <%= descriptor["Module"] %>_H */

/*______ E N D _____ (<%= descriptor["Module"] %>.h) ________________________________________________*/
