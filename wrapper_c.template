/******************************************************************************/
/**
 * \brief       <%= descriptor["Module"] %>.
 * \details     <%= descriptor["Details"] %>
 *
 * \file        <%= descriptor["Module"] %>.h
 * \project{
 *              <%= descriptor["Platform"] %>
 *}
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 * \history{     
                <% for history in descriptor["History"] %>
 *              <%= history["Author"] %>,
 *              <%= history["Date"] %>,
 *              <%= history["Description"] %>,
                <% end %>
 *}
 */
/******************************************************************************/


/*______ I N C L U D E - F I L E S ___________________________________________*/

/* Application (Myself)*/
#include "<%= descriptor["Module"] %>.h"
#include "<%= descriptor["Module"] %>_config.h"
#include "<%= descriptor["Module"] %>_Model.h"

/* PTF_STD */
#include "syst.h"
#include "wkss.h"

/* I_O */
#include "linp.h"
#include "doup.h"

/* NET_DIAG */
#include "netc.h"
#include "gpep.h"

/* VERS (at least for timers) */
#include "vers.h"


/* Application (Others)*/
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Implemented"] && signal["Source"]!='Network' %>
#include "<%= signal["Source"] %>.h"
<% else %>
/* TODO When <%= signal["Source"] %> implemented delete comment on following statement */
//#include "<%= signal["Source"] %>.h"
<% end %>
<% end %>
<% end %>


/*______ L O C A L - D E F I N E S ___________________________________________*/


/* max number of events */
#define <%= descriptor["Module"] %>_EVENT_COUNT_MAX  255

/*______ L O C A L - T Y P E S _______________________________________________*/

/*______ G L O B A L - D A T A _______________________________________________*/

/*______ P R I V A T E - D A T A _____________________________________________*/

/*______ L O C A L - D A T A _________________________________________________*/

/*outputs */
<% for output in descriptor["Output"] %>
static <%= output["Type"] %> <%= descriptor["Module"] %>_<%= output["Name"] %>;
<% end %>
static u_int08 <%= descriptor["Module"] %>_ModelEventCounter;

/*______ L O C A L - M A C R O S _____________________________________________*/

/*______ I M P O R T - F U N C T I O N S - P R O T O T Y P E S _______________*/

/*______ L O C A L - F U N C T I O N S - P R O T O T Y P E S _________________*/

void <%= descriptor["Module"] %>_ReadOutputs(void);

/*______ P R I V A T E - F U N C T I O N S ___________________________________*/

/*______ L O C A L - F U N C T I O N S _______________________________________*/

/*______ G L O B A L - F U N C T I O N S _____________________________________*/

/* NOTE
   Bind following callback
   function: <%= descriptor["Module"] %>_Init(void)
   in file: ...\BCM_APP_L7_F142M\BCML7_CLIENT\CONFIGURATION_FILES\syst_config.c
   put following line: <%= descriptor["Module"] %>_Init();
   into routine: void Syst_StartUpHookClient(void) at applications section.
*/
/******************************************************************************/
/**
 * \brief       Initialize module.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_Init(void)
{
	/* initialize inputs */
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if !signal["Implemented"]  || descriptor["MIL"] %>
<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=<%= (signal["Source"]).upcase %>_<%= (input["Name"]).upcase %>_<%= (input["Value"][0][0]).upcase %>;
<% else %>
<% if input["Value"][0][2] == '' %>
<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=<%= (signal["Source"]).upcase %>_<%= (input["Name"]).upcase %>_<%= (input["Value"][0][0]).upcase %>;
<% else %>
<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=<%= (signal["Source"]).upcase %>_<%= (input["Value"][0][2]).upcase %>;
<% end %>
<% end %>
<% end %>
<% end %>

	/* initialize timers */
<% if descriptor.has_key?("Timer") %>
<% for timer in descriptor["Timer"] %>
<% if timer["Implemented"] %>
<%= descriptor["Module"] %>_ModelInputs.Timer<%= timer["Name"] %>=VERS_TIMER_STOPPED;
<% end %>
<% end %>
<% end %>

	/* initialize outputs */
<% for output in descriptor["Output"] %>
<%= descriptor["Module"] %>_<%= output["Name"] %>=<%= (descriptor["Module"]).upcase %>_<%= (output["Name"]).upcase %>_<%= (output["Value"][0][0]).upcase %>;
<%= descriptor["Module"] %>_ModelOutputs.<%= output["Name"] %>=<%= descriptor["Module"] %>_<%= output["Name"] %>;
<% for signal in output["Signal"]%>
<% if signal["Type"] == "PHY" %>
/* NOTE
 * in file: ...\BCM_I_O\CONF\doup_cfg.h
 * add macro: #define DOUP_Set<%= output["Name"] %>(x)  DOUP_SetOutVal(<%= signal["ProcessorPinName"] %>,x)
*/
DOUP_Set<%= output["Name"] %>(<%= descriptor["Module"] %>_ModelOutputs.<%= output["Name"] %>);
<% end %>
<% if signal["Type"] == "CAN" %>
NETC_TX_<%= signal["MessageName"] %><%= signal["SignalName"] %>=<%= descriptor["Module"] %>_ModelOutputs.<%= output["Name"] %>;
<% end %>
<% end %>
<% end %>

    /* initialize output feedback */
<% for output in descriptor["Output"] %>
<% for signal in output["Signal"]%>
<% if signal.has_key?("Diagnosis") %>
<% if signal["Type"] == "PHY" && signal["Diagnosis"]%>
<%= descriptor["Module"] %>_ModelInputs.<%= output["Name"] %>Feedback=(u_int08) DOUP_NO_TYPE_ERR;
<% end %>
<% end %>
<% end %>
<% end %>

<%= descriptor["Module"] %>_ModelEventCounter = 1;


}


<%# PROXY callback (START SECTION) %>
<% proxi_used=0 %>
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "PROXY" %>
<% proxi_used=1 %>
<% end %>
<% end %>
<% end %>
<% if proxi_used == 1 %>
/* NOTE
   Bind following callback
   function: <%= descriptor["Module"] %>_ProxiStatusChanged();
   in file: ...\BCM_APP_L7_F142M\BCML7_CLIENT\CONFIGURATION_FILES\vers_config.h
   at section: G L O B A L - M A C R O S  */
/******************************************************************************/
/**
 * \brief       <%= descriptor["Module"] %>_ProxiStatusChanged callback function.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 *}
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_ProxiStatusChanged(void)
{
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "PROXY" %>
<% if input["Implemented"] %>
<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=VERS_Get<%= input["Name"] %>();
<% else %>
/* TODO  Delete following comment when VERS_Get<%= input["Name"] %>() is implemented*/
//<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=VERS_Get<%= input["Name"] %>();
<% end %>
<% end %>
<% end %>
<% end %>
if(<%= descriptor["Module"] %>_ModelEventCounter < <%= descriptor["Module"] %>_EVENT_COUNT_MAX)
{
<%= descriptor["Module"] %>_ModelEventCounter++;
}
}



<% end %>
<%# PROXY callback (STOP SECTION) %>


<%# NBC SIGNAL callback (START SECTION) %>
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "NBC" %>
/* NOTE
   Bind following callback
   function: <%= descriptor["Module"] %>_<%= input["Name"] %>StatusChanged();
   in file: <%= signal["Source"] %>_config.h
   at section: G L O B A L - M A C R O S  */
/******************************************************************************/
/**
 * \brief       <%= descriptor["Module"] %>_<%= input["Name"] %>StatusChanged callback function.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 *}
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_<%= input["Name"] %>StatusChanged(void)
{
<% if signal["Implemented"] %>
<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=<%= signal["Source"] %>_Get<%= input["Name"] %>();
<% else %>
/* TODO  Delete following comment when <%= signal["Source"] %> implemented*/
//<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=<%= signal["Source"] %>_Get<%= input["Name"] %>();
<% end %>
if(<%= descriptor["Module"] %>_ModelEventCounter < <%= descriptor["Module"] %>_EVENT_COUNT_MAX)
{
<%= descriptor["Module"] %>_ModelEventCounter++;
}
}



<% end %>
<% end %>
<% end %>
<%# NBC SIGNAL callback (STOP SECTION) %>

<%# PHYSICAL SIGNAL callback (START SECTION) %>
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "PHY" %>
/* NOTE
   Bind following callback
   function: <%= descriptor["Module"] %>_<%= input["Name"] %>StatusChanged();
   in file: ...\BCM_I_O\CONF\linp_config.h
   at section: Logical Input CALLBACK function mapping
   changing macro: #define Linp_EVENT_CALLBACK_<%= signal["ProcessorPinName"] %>        LINP_DummyDirect
   into this:      #define Linp_EVENT_CALLBACK_<%= signal["ProcessorPinName"] %>        <%= descriptor["Module"] %>_<%= input["Name"] %>StatusChanged
*/
/******************************************************************************/
/**
 * \brief       <%= input["Name"] %> status changed callback function.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 *}
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_<%= input["Name"] %>StatusChanged(void)
{
<% if signal["Implemented"] %>
<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=(<%= input["Type"] %>) LINP_Get<%= signal["ProcessorPinName"] %>();
<% else %>
/* TODO  Delete following comment when <%= input["Source"] %> has binding on this callback routine*/
//<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=(<%= input["Type"] %>) LINP_Get<%= signal["ProcessorPinName"] %>();
<% end %>
if(<%= descriptor["Module"] %>_ModelEventCounter < <%= descriptor["Module"] %>_EVENT_COUNT_MAX)
{
<%= descriptor["Module"] %>_ModelEventCounter++;
}
}



<% end %>
<% end %>
<% end %>
<%# PHYSICAL SIGNAL callback (STOP SECTION) %>


<%# Diagnosis callback (START SECTION) %>
<% for output in descriptor["Output"] %>
<% for signal in output["Signal"]%>
<% if signal.has_key?("Diagnosis") %>
<% if signal["Type"] == "PHY" && signal["Diagnosis"]%>
/* NOTE
   Check if following callback
   function: <%= descriptor["Module"] %>_<%= output["Name"] %>Diagnosis();
   in file: ...\BCM_I_O\CONF\linp_config.h
   
   put into file: ...\BCM_I_O\CONF\doup_cfg.h
   at section: <%= descriptor["Module"] %>
   following define
   #define DOUP_GetErrorType<%= output["Name"] %>()      DOUP_GetErrorType(<%= signal["ProcessorPinName"]%>)
*/
/******************************************************************************/
/**
 * \brief       <%= output["Name"] %> diagnosis callback function.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 *}
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_<%= output["Name"] %>Diagnosis(void)
{
<%= descriptor["Module"] %>_ModelInputs.<%= output["Name"] %>Feedback=(u_int08) DOUP_GetErrorType<%= output["Name"] %>();
if(<%= descriptor["Module"] %>_ModelEventCounter < <%= descriptor["Module"] %>_EVENT_COUNT_MAX)
{
<%= descriptor["Module"] %>_ModelEventCounter++;
}
}


<% end %>
<% end %>
<% end %>
<% end %>
<%# Diagnosis callback (STOP SECTION) %>


<%# NETWORK SIGNAL callback (START SECTION) %>
<% mset = Hash.new %>
<% mset.default=0 %>
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "CAN" %>
<% if  mset[signal["MessageName"]] == 0 %>
<% mset[signal["MessageName"]]=[] %>
<% end %>
<% mset[signal["MessageName"]] << signal %>
<% end %>
<% end %>
<% end %>

<% mset.each_key { | messagename | %>
/* NOTE
   Bind following callback
   function: <%= descriptor["Module"] %>_<%= messagename %>_Confirmation();
   in file: ...\BCM_NET_DIAG\L7\CAN\Presentation\NETP\netp_config.c
   at section: where <%= messagename %> is evalued
   put at the end ov block this call: <%= descriptor["Module"] %>_<%= messagename %>_Confirmation();
*/
/******************************************************************************/
/**
 * \brief       <%= descriptor["Module"] %>_<%= messagename %>_Confirmation callback function.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 *}
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_<%= messagename %>_Confirmation(void)
{
<% for input in descriptor["Input"] %>
<% for signal in input["Signal"] %>
<% if signal["Type"] == "CAN" %>
<% if signal["MessageName"] == messagename %>
<% if input["Implemented"] %>
<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=NETC_RX_<%= signal["MessageName"] %><%= signal["SignalName"] %>;
<% else %>
/* TODO  Delete following comment when <%= input["Source"] %> has binding on this callback routine*/
//<%= descriptor["Module"] %>_ModelInputs.<%= input["Name"] %>=NETC_RX_<%= signal["MessageName"] %><%= signal["SignalName"] %>;
<% end %>
<% end %>
<% end %>
<% end %>
<% end %>
if(<%= descriptor["Module"] %>_ModelEventCounter < <%= descriptor["Module"] %>_EVENT_COUNT_MAX)
{
<%= descriptor["Module"] %>_ModelEventCounter++;
}
}



<% } %>
<%# NETWORK SIGNAL callback (STOP SECTION) %>


/******************************************************************************/
/**
 * \brief       Read output signals from the model and call status changed callback if needed.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
*/
/******************************************************************************/
void <%= descriptor["Module"] %>_ReadOutputs(void)
{
<% for output in descriptor["Output"] %>
if (<%= descriptor["Module"] %>_<%= output["Name"] %> != <%= descriptor["Module"] %>_ModelOutputs.<%= output["Name"] %>)
{
<%= descriptor["Module"] %>_<%= output["Name"] %> = <%= descriptor["Module"] %>_ModelOutputs.<%= output["Name"] %>;
<% for signal in output["Signal"]%>
<% if signal["Type"] == "PHY" %>
DOUP_Set<%= output["Name"] %>(<%= descriptor["Module"] %>_<%= output["Name"] %>);
<% end %>
<% if signal["Type"] == "CAN" %>
NETC_TX_<%= signal["MessageName"] %><%= signal["SignalName"] %>=<%= descriptor["Module"] %>_<%= output["Name"] %>;
<% if signal["Async"] == true %>
GPEP_Net1EvtMsgTxReq( GPEP_<%= signal["MessageName"] %>_MASK);
<% end %>
<% end %>
<% if signal["Type"] == "NBC" %>
<%= descriptor["Module"].upcase %>_<%= output["Name"].upcase %>_STATUS_CHANGED();
<% end %>
<% end %>
}

<% end %>
}

<%# Get functions (START SECTION) %>
<% for output in descriptor["Output"] %>
/******************************************************************************/
/**
 * \brief       <%= descriptor["Module"] %>_Get<%= output["Name"] %> return <%= descriptor["Module"] %>_<%= output["Name"] %> signal value
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 */
/******************************************************************************/
<%= descriptor["Module"] %>_<%= output["Name"] %>_t <%= descriptor["Module"] %>_Get<%= output["Name"] %>(void)
{
  return <%= descriptor["Module"] %>_<%= output["Name"] %>;
}
<% end %>
<%# Get functions (STOP SECTION) %>



<%# Timer Management (START SECTION) %>
<% if descriptor.has_key?("Timer") %>
<% for timer in descriptor["Timer"] %>
<% if timer["Implemented"] %>

/******************************************************************************/
/**
 * \brief       Start Timer<%= timer["Name"] %> with specified time. If Timer was already running it will be restarted
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 * \param       time to wait
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_SetTimer<%= timer["Name"] %>(u_int32 time)
{
  CancelAlarm(<%= descriptor["Module"] %>_Timer<%= timer["Name"] %>_al);
  SetRelAlarm(<%= descriptor["Module"] %>_Timer<%= timer["Name"] %>_al,MSEC(time),0);
  <%= descriptor["Module"] %>_ModelInputs.Timer<%= timer["Name"] %> = VERS_TIMER_RUNNING;
if(<%= descriptor["Module"] %>_ModelEventCounter < <%= descriptor["Module"] %>_EVENT_COUNT_MAX)
{
<%= descriptor["Module"] %>_ModelEventCounter++;
}
}

/******************************************************************************/
/**
 * \brief       Reset Timer<%= timer["Name"] %> function.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_ResetTimer<%= timer["Name"] %>(void)
{
  CancelAlarm(<%= descriptor["Module"] %>_Timer<%= timer["Name"] %>_al);
  <%= descriptor["Module"] %>_ModelInputs.Timer<%= timer["Name"] %> = VERS_TIMER_STOPPED;
if(<%= descriptor["Module"] %>_ModelEventCounter < <%= descriptor["Module"] %>_EVENT_COUNT_MAX)
{
<%= descriptor["Module"] %>_ModelEventCounter++;
}
}

/******************************************************************************/
/**
 * \brief       Timer<%= timer["Name"] %> expired callback function. Called when Timer expires.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_Timer<%= timer["Name"] %>Expired(void)
{
  <%= descriptor["Module"] %>_ModelInputs.Timer<%= timer["Name"] %> = VERS_TIMER_EXPIRED;
if(<%= descriptor["Module"] %>_ModelEventCounter < <%= descriptor["Module"] %>_EVENT_COUNT_MAX)
{
<%= descriptor["Module"] %>_ModelEventCounter++;
}
}
<% end %>
<% end %>
<% end %>
<%# Timer Management (STOP SECTION) %>

/* NOTE
   Bind following callback
   function: <%= descriptor["Module"] %>_Task_ts(void)
   in file: ...\BCM_APP_L7_F142M\BCML7_CLIENT\CONFIGURATION_FILES\task_config.c
   put following line: <%= descriptor["Module"] %>_Task_ts();
   into routine: void TASK_XXXmsCallServiceRunning(void) where XXX is calling time period in ms. 
*/
/******************************************************************************/
/**
 * \brief       Task to manage model events.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_Task_ts(void)
{
  if (<%= descriptor["Module"] %>_ModelEventCounter > 0)
  {
    <%= descriptor["Module"] %>_Model();
    <%= descriptor["Module"] %>_ReadOutputs();
    <%= descriptor["Module"] %>_ModelEventCounter--;
  }
}


/* NOTE
   put this line into mandatory idle state of Stateflow of Model
   exit: <%= descriptor["Module"] %>_StayActive(void);
   
   Modify file: ...\BCM_APP_L7_F142M\PTF_STD\System\WKSS\PublicInt\wkss.h
   
   adding line: <%= descriptor["Module"] %>_ApplicationTask,
   before following code fragment:
   WKSS_NUM_OF_TASKS 
} WKSS_ApplicationTask_t;
*/
/******************************************************************************/
/**
 * \brief       Function to request the system to stay active.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_StayActive(void)
{
  WKSS_TaskState(<%= descriptor["Module"] %>_ApplicationTask, WKSS_ACTIVE_TASK);
}

/* NOTE
   put this line into mandatory idle state of Stateflow of Model
   entry: <%= descriptor["Module"] %>_GoToSleep(void);
*/
/******************************************************************************/
/**
 * \brief       Function to allow the system to go to sleep.
 * \author      <%= descriptor["Author"] %>
 * \since       <%= descriptor["Date"] %>
 */
/******************************************************************************/
void <%= descriptor["Module"] %>_GoToSleep(void)
{
  WKSS_TaskState(<%= descriptor["Module"] %>_ApplicationTask, WKSS_INACTIVE_TASK);
}

/*______ E N D _____ (<%= descriptor["Module"] %>.c) _______________________________________________*/



